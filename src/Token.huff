// Interface
#define function mint(address,uint256) nonpayable returns ()
#define function burn(address,uint256) nonpayable returns ()
#define function transfer(address,uint256) nonpayable returns (bool)
#define function transferFrom(address,address,uint256) nonpayable returns (bool)
#define function approve(address,uint256) nonpayable returns (bool)

#define function totalSupply() nonpayable returns (uint256)
#define function balanceOf(address) nonpayable returns (uint256)
#define function allowance(address,address) nonpayable returns (uint256)

#define function decimals() nonpayable returns (uint256)
#define function name() nonpayable returns (string)
#define function symbol() nonpayable returns (string)

// Events
#define event Approval(address indexed, address indexed, uint256)
#define event Transfer(address indexed, address indexed, uint256)

// Errors
// InsufficientBalance()
#define constant INSUFFICIENT_BALANCE = 0xf4d678b800000000000000000000000000000000000000000000000000000000
// InsufficientAllowance()
#define constant INSUFFICIENT_ALLOWANCE = 0x13be252b00000000000000000000000000000000000000000000000000000000

// Storage
// bytes32("token.storage.balanceOf")
#define constant BALANCE_OF = 0x746f6b656e2e73746f726167652e62616c616e63654f66000000000000000000 
// bytes32("token.storage.totalSupply")
#define constant TOTAL_SUPPLY = 0x746f6b656e2e73746f726167652e746f74616c537570706c7900000000000000 
// bytes32("token.storage.allowances")
#define constant ALLOWANCES = 0x746f6b656e2e73746f726167652e616c6c6f77616e6365730000000000000000

// Constants
// bytes32("MyCoolToken")
#define constant NAME = 0x4d79436f6f6c546f6b656e000000000000000000000000000000000000000000
#define constant NAME_LEN = 0xb

// bytes32("COOL")
#define constant SYMBOL = 0x434f4f4c00000000000000000000000000000000000000000000000000000000
#define constant SYMBOL_LEN = 0x4

#define constant DECIMALS = 0x12

#define macro DEFJUMP(label) = takes (2) returns (1) {
            // [func_sig, call_sig]
    <label> // [label, func_sig, call_sig]
    swap1   // [func_sig, label, call_sig]
    dup3    // [call_sig, func_sig, label, call_sig]
    eq      // [1, label, call_sig]
    swap1   // [label, 1, call_sig]
    jumpi   // [call_sig]
}

#define macro CALL_SIG() = takes (0) returns (1) {
    0x00 calldataload 0xE0 shr
}

#define macro FALLTHROUGH_REVERT() = takes (0) returns (0) {
    0x00 0x00 revert
}

#define macro EIP_1967_SLOT() = takes (1) returns (1) {
                           // [bytes32_slot_name]
    0x00 mstore            // []          
    0x01                   // [0x01]
    0x20 0x00 sha3         // [slot_name_hash, 0x01]
    sub                    // [slot_name_hash - 0x01] 
}

#define macro HASH_MAP_SLOT() = takes (2) returns (1) {
                   // [map_name, entry_key]
    0x00 mstore    // [entry_key] 
    0x20 mstore    // []
    0x01           // [0x01] 
    0x40 0x00 sha3 // [sha3(map_name . entry_key), 0x01]
    sub            // [slot_name]
}

#define macro STORE_VALUE() = takes (2) returns (0) {
                    // [slot_name, value]
    EIP_1967_SLOT() // [slot_addr, value]
    sstore          // []
}

#define macro READ_VALUE() = takes (1) returns (1) {
                    // [slot_name] 
    EIP_1967_SLOT() // [slot_addr]
    sload           // [value]
}

#define macro READ_KEY() = takes (1) returns (1) {
    // [map_slot_addr]
    HASH_MAP_SLOT()
    READ_VALUE()
}

#define macro KEY_IN(map) = takes (1) returns (1) {
    <map>
    HASH_MAP_SLOT()
}

#define macro KEY() = takes (2) returns (1) {
    HASH_MAP_SLOT()
}

#define macro WRITE_KEY() = takes (2) returns (0) {
    // [map_slot_addr]
    HASH_MAP_SLOT()
    STORE_VALUE()
}

#define macro MSTORE_STR() = takes (2) returns (0) {
    // [string_len, string]
    0x20 mstore
    0x40 mstore 
    0x20 0x00 mstore
}

#define macro MSTORE_WORD() = takes (1) returns (0) {
    // [value]
    0x00 mstore
}

#define macro REVERT(error) = takes (0) returns (0) {
    <error>
    MSTORE_WORD()
    0x04 0x00 revert
}

#define macro RETURN_N(n) = takes (1) returns (0) {
    <n>           // [num_words]
    0x20 mul      // [0x20 * num_words] 
    0x00 return
}

#define macro RETURN() = takes (0) returns (0) {
   0x00 0x00 return 
}

#define macro RETURN1() = takes (0) returns (0) {
    RETURN_N(0x01)
}

#define macro RETURN3() = takes (0) returns (0) {
    RETURN_N(0x03)
}

#define macro RETURN_STR() = takes (0) returns (0) {
    MSTORE_STR() 
    RETURN3()
}

#define macro RETURN_WORD() = takes (0) returns (0) {
    MSTORE_WORD() 
    RETURN1()
}

#define macro RETURN_TRUE() = takes (0) returns (0) {
    0x01
    MSTORE_WORD() 
    RETURN1()
}

#define macro ARGV(n) = takes (0) returns (1) {
    <n>
    0x20 mul      // [0x20 * calldata_word]
    0x04 add      // [0x4 + 0x20 * calldata_word] 
    calldataload
}

#define macro ARGV0() = takes (0) returns (1) {
    ARGV(0x00) 
}

#define macro ARGV1() = takes (0) returns (1) {
    ARGV(0x01)
}

#define macro ARGV2() = takes (0) returns (1) {
    ARGV(0x02)
}

#define macro INCREMENT() = takes (2) returns (1) {
                  // [slot_addr, amount]
    dup1          // [slot_addr, slot_addr, amount]
    READ_VALUE()  // [current_val, slot_addr, amount]
    dup3          // [amount, current_val, slot_addr, amount]
    add           // [current_val + amount, slot_addr, amount]
    swap1         // [slot_addr, new_amount, amount]
    STORE_VALUE() // [amount] 
}

#define macro DECREMENT() = takes (2) returns (1) {
                  // [slot_addr, amount]
    dup1          // [slot_addr, slot_addr, amount]
    READ_VALUE()  // [current_val, slot_addr, amount]
    dup3          // [amount, current_val, slot_addr, amount]
    swap1
    sub           // [current_val + amount, slot_addr, amount]
    swap1         // [slot_addr, new_amount, amount]
    STORE_VALUE() // [amount] 
}

#define macro GTE() = takes(2) returns (1) {
          // [a, b]
    swap1 // [b, a]
    dup1  // [b, b, a]
    dup3  // [a, b, b, a]
    gt    // [a > b, b, a]
    swap3 // [a, b, a > b]
    eq    // [a == b, a > b]
    or
}

#define macro THEN(label) = takes (0) returns (0) {
    <label> jumpi
}

#define macro SUFFICIENT_BALANCE() = takes (2) returns (1) {
    // [account, amount]
    KEY_IN(BALANCE_OF) READ_VALUE() GTE()
}

#define macro CALLER_ALLOWANCE() = takes (1) returns (1) {
    KEY_IN(ALLOWANCES) // [allowances_slot, amount]
    caller             // [caller, allowances_slot, amount]
    KEY()
    READ_VALUE()       // [allowance, amount] 
}

#define macro AMOUNT_APPROVED() = takes (1) returns (1) {
    // [account, amount]
    CALLER_ALLOWANCE() GTE()
}

#define macro BALANCE_OF() = takes (0) returns (0) {
    ARGV0() KEY_IN(BALANCE_OF) READ_VALUE()     
    RETURN_WORD()
}

#define macro ALLOWANCE() = takes (0) returns (0) {
    ARGV0() KEY_IN(ALLOWANCES) ARGV1() READ_KEY()
    RETURN_WORD()
}

#define macro TOTAL_SUPPLY() = takes(0) returns (0) {
    [TOTAL_SUPPLY] READ_VALUE() RETURN_WORD()
}

#define macro DECIMALS() = takes (0) returns (0) {
    [DECIMALS] RETURN_WORD() 
}

#define macro NAME() = takes (0) returns (0) {
    [NAME] [NAME_LEN] RETURN_STR()
}

#define macro SYMBOL() = takes (0) returns (0) {
    [SYMBOL] [SYMBOL_LEN] RETURN_STR()
}

#define macro MINT() = takes (0) returns (0) {
    ARGV1() ARGV0() KEY_IN(BALANCE_OF) INCREMENT()
    ARGV1() [TOTAL_SUPPLY] INCREMENT()
    RETURN()
}

#define macro BURN() = takes (0) returns (0) {
    ARGV1() ARGV0() KEY_IN(BALANCE_OF) DECREMENT()
    ARGV1() [TOTAL_SUPPLY] DECREMENT()
    RETURN()
}

#define macro EMIT_APPROVAL() = takes (3) returns (0) {
                           // [value, from, to]
    MSTORE_WORD()          // [from, to]
    __EVENT_HASH(Approval) // [sig, from, to]
    0x20 0x00 log3
}

#define macro APPROVE() = takes (0) returns (0) {
    ARGV1() caller KEY_IN(ALLOWANCES) ARGV0() KEY() STORE_VALUE() 
    ARGV0() caller ARGV1() EMIT_APPROVAL()
    RETURN_TRUE()
}

#define macro EMIT_TRANSFER() = takes (3) returns (0) {
                           // [value, from, to]
    MSTORE_WORD()          // [from, to]
    __EVENT_HASH(Transfer) // [sig, from, to]
    0x20 0x00 log3
}

#define macro TRANSFER() = takes (0) returns (0) {
    ARGV1() caller SUFFICIENT_BALANCE() THEN(doTransfer)
    REVERT(INSUFFICIENT_BALANCE)

    doTransfer:
        ARGV1() caller  KEY_IN(BALANCE_OF) DECREMENT()
        ARGV1() ARGV0() KEY_IN(BALANCE_OF) INCREMENT()
        ARGV0() caller ARGV1() EMIT_TRANSFER()
        RETURN_TRUE()
}

#define macro TRANSFER_FROM() = takes (0) returns (0) {
    ARGV2() ARGV0() AMOUNT_APPROVED() THEN(checkBalance)
    REVERT(INSUFFICIENT_ALLOWANCE)

    checkBalance:
        ARGV2() ARGV0() SUFFICIENT_BALANCE() THEN(doTransferFrom)
        REVERT(INSUFFICIENT_BALANCE)
    
    doTransferFrom:
        ARGV2() ARGV0() KEY_IN(BALANCE_OF) DECREMENT()
        ARGV2() ARGV1() KEY_IN(BALANCE_OF) INCREMENT()
        ARGV2() ARGV0() KEY_IN(ALLOWANCES) caller KEY() DECREMENT() 
        ARGV1() ARGV0() ARGV2() EMIT_TRANSFER()
        RETURN_TRUE()
}

#define macro MAIN() = takes (0) returns (0) {
    CALL_SIG()

    __FUNC_SIG(mint)         DEFJUMP(mint)
    __FUNC_SIG(burn)         DEFJUMP(burn)
    __FUNC_SIG(transfer)     DEFJUMP(transfer)
    __FUNC_SIG(transferFrom) DEFJUMP(transferFrom)
    __FUNC_SIG(approve)      DEFJUMP(approve)
    __FUNC_SIG(allowance)    DEFJUMP(allowance)
    __FUNC_SIG(balanceOf)    DEFJUMP(balanceOf)
    __FUNC_SIG(totalSupply)  DEFJUMP(totalSupply)
    __FUNC_SIG(name)         DEFJUMP(name)
    __FUNC_SIG(symbol)       DEFJUMP(symbol)
    __FUNC_SIG(decimals)     DEFJUMP(decimals)

    FALLTHROUGH_REVERT()

    mint:
        MINT()
    burn:
        BURN()
    transfer:
        TRANSFER()
    transferFrom:
        TRANSFER_FROM()
    approve:
        APPROVE()
    allowance:
        ALLOWANCE()
    balanceOf:
        BALANCE_OF()
    decimals:
        DECIMALS()
    name:
        NAME()
    symbol:
        SYMBOL()
    totalSupply:
        TOTAL_SUPPLY()
}

